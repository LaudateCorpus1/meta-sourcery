From 59a06e45829c92d2cc46e40af0e71c405cdf20ea Mon Sep 17 00:00:00 2001
From: Sandra Loosemore <sandra@codesourcery.com>
Date: Tue, 9 Aug 2016 14:30:06 -0700
Subject: [PATCH 02/52] Fix uninitialized variable in dynamic linker.

Upstream submission:
<https://sourceware.org/ml/libc-alpha/2015-03/msg00704.html>.
Although originally to fix an issue seen on MIPS, not known to be
irrelevant to other architectures.

	Merge from SCB glibc 2.26:

        2015-03-23  Sandra Loosemore  <sandra@codesourcery.com>

        * elf/rtld.c (_dl_start): Zero-initialize the entire bootstrap_map
        structure.
---
 ChangeLog.csl |  7 +++++++
 elf/rtld.c    | 14 ++++++++------
 2 files changed, 15 insertions(+), 6 deletions(-)

diff --git a/ChangeLog.csl b/ChangeLog.csl
index 6a3729552c..a53eef31cc 100644
--- a/ChangeLog.csl
+++ b/ChangeLog.csl
@@ -1,3 +1,10 @@
 2018-02-01  Joseph Myers  <joseph@codesourcery.com>
 
+	Merge from SCB glibc 2.26:
+
+	2015-03-23  Sandra Loosemore  <sandra@codesourcery.com>
+
+        * elf/rtld.c (_dl_start): Zero-initialize the entire bootstrap_map
+        structure.
+
 	* release-notes-csl.xml (GNU C Library version 2.27): New note.
diff --git a/elf/rtld.c b/elf/rtld.c
index 453f56eb15..37d5bfeb5c 100644
--- a/elf/rtld.c
+++ b/elf/rtld.c
@@ -465,7 +465,7 @@ _dl_start (void *arg)
     HP_TIMING_NOW (info.start_time);
 #endif
 
-  /* Partly clean the `bootstrap_map' structure up.  Don't use
+  /* Zero-initialize the `bootstrap_map' structure.  Don't use
      `memset' since it might not be built in or inlined and we cannot
      make function calls at this point.  Use '__builtin_memset' if we
      know it is available.  We do not have to clear the memory if we
@@ -473,12 +473,14 @@ _dl_start (void *arg)
      are initialized to zero by default.  */
 #ifndef DONT_USE_BOOTSTRAP_MAP
 # ifdef HAVE_BUILTIN_MEMSET
-  __builtin_memset (bootstrap_map.l_info, '\0', sizeof (bootstrap_map.l_info));
+  __builtin_memset (&bootstrap_map, '\0', sizeof (struct link_map));
 # else
-  for (size_t cnt = 0;
-       cnt < sizeof (bootstrap_map.l_info) / sizeof (bootstrap_map.l_info[0]);
-       ++cnt)
-    bootstrap_map.l_info[cnt] = 0;
+  {
+    char *p = (char *) &bootstrap_map;
+    char *pend = p + sizeof (struct link_map);
+    while (p < pend)
+      *(p++) = '\0';
+  }
 # endif
 #endif
 
-- 
2.11.1

