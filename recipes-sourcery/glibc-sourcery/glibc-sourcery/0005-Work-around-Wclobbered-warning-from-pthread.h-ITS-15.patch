From 7d3ad652a7fdc271a2d83315d2fc7b6633479792 Mon Sep 17 00:00:00 2001
From: Paul Carroll <pcarroll@mentor.com>
Date: Wed, 6 Dec 2017 07:42:23 -0800
Subject: [PATCH 05/52] Work around -Wclobbered warning from pthread.h
 (ITS-152).

	Merge from SCB glibc 2.26:

	2017-12-06  Paul Carroll  <pcarroll@codesourcery.com>

	ITS-152
	* sysdeps/nptl/pthread.h:  Added 'volatile' to __cancel_routine
	and __cancel_arg definitions.
	* sysdeps/unix/sysv/linux/hppa/pthread.h:  Likewise.
	* nptl/Makefile: Added tst_clobbered test case.
	* nptl/tst-clobbered.c: New test case.
	* release-notes-csl.xml (pthread.h patch): New note.
---
 ChangeLog.csl                          | 12 +++++++++++
 nptl/Makefile                          |  2 +-
 nptl/tst-clobbered.c                   | 39 ++++++++++++++++++++++++++++++++++
 release-notes-csl.xml                  | 16 ++++++++++++++
 sysdeps/nptl/pthread.h                 |  8 +++----
 sysdeps/unix/sysv/linux/hppa/pthread.h |  8 +++----
 6 files changed, 76 insertions(+), 9 deletions(-)
 create mode 100644 nptl/tst-clobbered.c

diff --git a/ChangeLog.csl b/ChangeLog.csl
index 59bfe17779..73cc64570f 100644
--- a/ChangeLog.csl
+++ b/ChangeLog.csl
@@ -2,6 +2,18 @@
 
 	Merge from SCB glibc 2.26:
 
+	2017-12-06  Paul Carroll  <pcarroll@codesourcery.com>
+
+	ITS-152
+	* sysdeps/nptl/pthread.h:  Added 'volatile' to __cancel_routine
+	and __cancel_arg definitions.
+	* sysdeps/unix/sysv/linux/hppa/pthread.h:  Likewise.
+	* nptl/Makefile: Added tst_clobbered test case.
+	* nptl/tst-clobbered.c: New test case.
+	* release-notes-csl.xml (pthread.h patch): New note.
+
+	Merge from SCB glibc 2.26:
+
 	2017-03-15  Sandra Loosemore  <sandra@codesourcery.com>
 
 	CB-3023
diff --git a/nptl/Makefile b/nptl/Makefile
index 6fc2c8bb6a..e914f2e38e 100644
--- a/nptl/Makefile
+++ b/nptl/Makefile
@@ -309,7 +309,7 @@ tests = tst-attr1 tst-attr2 tst-attr3 tst-default-attr \
 	tst-thread_local1 tst-mutex-errorcheck tst-robust10 \
 	tst-robust-fork tst-create-detached tst-memstream \
 	tst-thread-exit-clobber tst-minstack-cancel tst-minstack-exit \
-	tst-minstack-throw
+	tst-minstack-throw tst-clobbered
 
 tests-internal := tst-rwlock19 tst-rwlock20 \
 		  tst-sem11 tst-sem12 tst-sem13 \
diff --git a/nptl/tst-clobbered.c b/nptl/tst-clobbered.c
new file mode 100644
index 0000000000..a20fc6a74b
--- /dev/null
+++ b/nptl/tst-clobbered.c
@@ -0,0 +1,39 @@
+#include <pthread.h>
+#pragma GCC diagnostic error "-Wclobbered"
+
+#include <stdlib.h>
+
+void cleanup_fn(void *mutex)
+{
+}
+
+typedef struct {
+  size_t progress;
+  size_t total;
+  pthread_mutex_t mutex;
+  pthread_cond_t cond;
+  double min_wait;
+} dmnsn_future;
+
+void
+dmnsn_future_wait(dmnsn_future *future, double progress)
+{
+  pthread_mutex_lock(&future->mutex);
+  while ((double)future->progress/future->total < progress) {
+    /* Warning goes away without this block */
+    if (progress < future->min_wait) {
+      future->min_wait = progress;
+    }
+
+    pthread_cleanup_push(cleanup_fn, &future->mutex);
+    pthread_cond_wait(&future->cond, &future->mutex);
+    pthread_cleanup_pop(0);
+  }
+  pthread_mutex_unlock(&future->mutex);
+}
+
+int
+main(int argc, char *argv[])
+{
+	exit(0);
+}
diff --git a/release-notes-csl.xml b/release-notes-csl.xml
index 7c8c08d538..bbb3b94eda 100644
--- a/release-notes-csl.xml
+++ b/release-notes-csl.xml
@@ -5,6 +5,22 @@
      relevant; it may be removed if it is relevant to all targets.
  -->
 
+      <!-- UUID: 8ee13c68-cc12-4068-8321-42d0daa9724b -->
+      <!-- TARGET: * -->
+      <!-- FEATURES: -->
+      <!-- COMPONENTS: glibc -->
+      <!-- SORT: glibc -->
+      <!-- ISSUE: ITS-152 -->
+      <formalpara>
+        <title><symbol>pthread_cleanup_push</symbol> compiler warnings</title>
+        <para>
+          Previously, use of the <symbol>pthread_cleanup_push</symbol> macro
+	  from <filename class='headerfile'>pthread.h</filename>
+	  sometimes caused warnings when compiled with optimization enabled.
+	  The macro has been modified to avoid those warnings.
+        </para>
+      </formalpara>
+
       <!-- UUID: 9ec854c5-c6c1-4e55-b5b1-bdfe02bdf399 -->
       <!-- TARGET: * -->
       <!-- FEATURES: -->
diff --git a/sysdeps/nptl/pthread.h b/sysdeps/nptl/pthread.h
index df049abf74..77c99ac9dc 100644
--- a/sysdeps/nptl/pthread.h
+++ b/sysdeps/nptl/pthread.h
@@ -665,8 +665,8 @@ __pthread_cleanup_routine (struct __pthread_cleanup_frame *__frame)
 # define pthread_cleanup_push(routine, arg) \
   do {									      \
     __pthread_unwind_buf_t __cancel_buf;				      \
-    void (*__cancel_routine) (void *) = (routine);			      \
-    void *__cancel_arg = (arg);						      \
+    void (* volatile __cancel_routine) (void *) = (routine);		      \
+    void * volatile __cancel_arg = (arg);				      \
     int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *)     \
 					__cancel_buf.__cancel_jmp_buf, 0);    \
     if (__glibc_unlikely (__not_first_call))				      \
@@ -700,8 +700,8 @@ extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
 #  define pthread_cleanup_push_defer_np(routine, arg) \
   do {									      \
     __pthread_unwind_buf_t __cancel_buf;				      \
-    void (*__cancel_routine) (void *) = (routine);			      \
-    void *__cancel_arg = (arg);						      \
+    void (* volatile __cancel_routine) (void *) = (routine);		      \
+    void * volatile __cancel_arg = (arg);				      \
     int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *)     \
 					__cancel_buf.__cancel_jmp_buf, 0);    \
     if (__glibc_unlikely (__not_first_call))				      \
diff --git a/sysdeps/unix/sysv/linux/hppa/pthread.h b/sysdeps/unix/sysv/linux/hppa/pthread.h
index 11a024db59..7715d54cf9 100644
--- a/sysdeps/unix/sysv/linux/hppa/pthread.h
+++ b/sysdeps/unix/sysv/linux/hppa/pthread.h
@@ -641,8 +641,8 @@ __pthread_cleanup_routine (struct __pthread_cleanup_frame *__frame)
 # define pthread_cleanup_push(routine, arg) \
   do {									      \
     __pthread_unwind_buf_t __cancel_buf;				      \
-    void (*__cancel_routine) (void *) = (routine);			      \
-    void *__cancel_arg = (arg);						      \
+    void (* volatile __cancel_routine) (void *) = (routine);		      \
+    void * volatile __cancel_arg = (arg);				      \
     int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *)     \
 					__cancel_buf.__cancel_jmp_buf, 0);    \
     if (__glibc_unlikely (__not_first_call))				      \
@@ -676,8 +676,8 @@ extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
 #  define pthread_cleanup_push_defer_np(routine, arg) \
   do {									      \
     __pthread_unwind_buf_t __cancel_buf;				      \
-    void (*__cancel_routine) (void *) = (routine);			      \
-    void *__cancel_arg = (arg);						      \
+    void (* volatile __cancel_routine) (void *) = (routine);		      \
+    void * volatile __cancel_arg = (arg);				      \
     int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *)     \
 					__cancel_buf.__cancel_jmp_buf, 0);    \
     if (__glibc_unlikely (__not_first_call))				      \
-- 
2.11.1

