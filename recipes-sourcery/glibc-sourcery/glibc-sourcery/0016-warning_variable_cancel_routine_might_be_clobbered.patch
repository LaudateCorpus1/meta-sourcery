From 5e59f2b434588d29010468479e8bf56ff7132a97 Mon Sep 17 00:00:00 2001
From: Paul Carroll <pcarroll@mentor.com>
Date: Fri, 14 Jul 2017 14:27:48 -0700
Subject: [PATCH 16/16] 2017-07-14  Paul Carroll  <pcarroll@codesourcery.com>

	ITS-152
	* sysdeps/nptl/pthread.h:  Added 'volatile' to __cancel_routine
	and __cancel_arg definitions.
	* sysdeps/unix/sysv/linux/hppa/pthread.h:  Likewise.
	* nptl/Makefile: Added tst_clobbered test case.
	* nptl/tst-clobbered.c: New test case.
	* release-notes-csl.xml (pthread.h patch): New note.
---
 ChangeLog.csl                          | 10 +++++++++
 nptl/Makefile                          |  3 ++-
 nptl/tst-clobbered.c                   | 39 ++++++++++++++++++++++++++++++++++
 release-notes-csl.xml                  | 16 ++++++++++++++
 sysdeps/nptl/pthread.h                 |  8 +++----
 sysdeps/unix/sysv/linux/hppa/pthread.h |  8 +++----
 6 files changed, 75 insertions(+), 9 deletions(-)
 create mode 100644 nptl/tst-clobbered.c

diff --git a/ChangeLog.csl b/ChangeLog.csl
index 4675ec6..a072d1e 100644
--- a/ChangeLog.csl
+++ b/ChangeLog.csl
@@ -1,3 +1,13 @@
+2017-07-14  Paul Carroll  <pcarroll@codesourcery.com>
+
+	ITS-152
+	* sysdeps/nptl/pthread.h:  Added 'volatile' to __cancel_routine 
+	and __cancel_arg definitions.
+	* sysdeps/unix/sysv/linux/hppa/pthread.h:  Likewise.
+	* nptl/Makefile: Added tst_clobbered test case.
+	* nptl/tst-clobbered.c: New test case.
+	* release-notes-csl.xml (pthread.h patch): New note.
+
 2017-07-10  Paul Carroll  <pcarroll@codesourcery.com>
 
 	ITS-180
diff --git a/nptl/Makefile b/nptl/Makefile
index 0d8aade..e352ed0 100644
--- a/nptl/Makefile
+++ b/nptl/Makefile
@@ -290,7 +290,8 @@ tests = tst-typesizes \
 	tst-initializers1 $(addprefix tst-initializers1-,\
 			    c89 gnu89 c99 gnu99 c11 gnu11) \
 	tst-bad-schedattr \
-	tst-thread_local1 tst-mutex-errorcheck tst-robust10
+	tst-thread_local1 tst-mutex-errorcheck tst-robust10 \
+	tst-clobbered
 xtests = tst-setuid1 tst-setuid1-static tst-setuid2 \
 	tst-mutexpp1 tst-mutexpp6 tst-mutexpp10
 test-srcs = tst-oddstacklimit
diff --git a/nptl/tst-clobbered.c b/nptl/tst-clobbered.c
new file mode 100644
index 0000000..a20fc6a
--- /dev/null
+++ b/nptl/tst-clobbered.c
@@ -0,0 +1,39 @@
+#include <pthread.h>
+#pragma GCC diagnostic error "-Wclobbered"
+
+#include <stdlib.h>
+
+void cleanup_fn(void *mutex)
+{
+}
+
+typedef struct {
+  size_t progress;
+  size_t total;
+  pthread_mutex_t mutex;
+  pthread_cond_t cond;
+  double min_wait;
+} dmnsn_future;
+
+void
+dmnsn_future_wait(dmnsn_future *future, double progress)
+{
+  pthread_mutex_lock(&future->mutex);
+  while ((double)future->progress/future->total < progress) {
+    /* Warning goes away without this block */
+    if (progress < future->min_wait) {
+      future->min_wait = progress;
+    }
+
+    pthread_cleanup_push(cleanup_fn, &future->mutex);
+    pthread_cond_wait(&future->cond, &future->mutex);
+    pthread_cleanup_pop(0);
+  }
+  pthread_mutex_unlock(&future->mutex);
+}
+
+int
+main(int argc, char *argv[])
+{
+	exit(0);
+}
diff --git a/release-notes-csl.xml b/release-notes-csl.xml
index 83ec9ba..f1ca15b 100644
--- a/release-notes-csl.xml
+++ b/release-notes-csl.xml
@@ -5,6 +5,22 @@
      relevant; it may be removed if it is relevant to all targets.
  -->
 
+      <!-- UUID: 8ee13c68-cc12-4068-8321-42d0daa9724b -->
+      <!-- TARGET: * -->
+      <!-- FEATURES: -->
+      <!-- COMPONENTS: glibc -->
+      <!-- SORT: glibc -->
+      <!-- ISSUE: ITS-152 -->
+      <formalpara>
+        <title><symbol>pthread_cleanup_push</symbol> compiler warnings</title>
+        <para>
+          Previously, use of the <symbol>pthread_cleanup_push</symbol> macro
+	  from <filename class='headerfile'>pthread.h</filename>
+	  sometimes caused warnings when compiled with optimization enabled.
+	  The macro has been modified to avoid those warnings.
+        </para>
+      </formalpara>
+
       <!-- UUID: eeeaf874-3d8a-4427-a70f-5c64a5dd3145 -->
       <!-- TARGET: * -->
       <!-- FEATURES: -->
diff --git a/sysdeps/nptl/pthread.h b/sysdeps/nptl/pthread.h
index fd0894e..d3a43d1 100644
--- a/sysdeps/nptl/pthread.h
+++ b/sysdeps/nptl/pthread.h
@@ -664,8 +664,8 @@ __pthread_cleanup_routine (struct __pthread_cleanup_frame *__frame)
 # define pthread_cleanup_push(routine, arg) \
   do {									      \
     __pthread_unwind_buf_t __cancel_buf;				      \
-    void (*__cancel_routine) (void *) = (routine);			      \
-    void *__cancel_arg = (arg);						      \
+    void (* volatile __cancel_routine) (void *) = (routine);		      \
+    void * volatile __cancel_arg = (arg);				      \
     int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *)     \
 					__cancel_buf.__cancel_jmp_buf, 0);    \
     if (__glibc_unlikely (__not_first_call))				      \
@@ -699,8 +699,8 @@ extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
 #  define pthread_cleanup_push_defer_np(routine, arg) \
   do {									      \
     __pthread_unwind_buf_t __cancel_buf;				      \
-    void (*__cancel_routine) (void *) = (routine);			      \
-    void *__cancel_arg = (arg);						      \
+    void (* volatile __cancel_routine) (void *) = (routine);		      \
+    void * volatile __cancel_arg = (arg);				      \
     int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *)     \
 					__cancel_buf.__cancel_jmp_buf, 0);    \
     if (__glibc_unlikely (__not_first_call))				      \
diff --git a/sysdeps/unix/sysv/linux/hppa/pthread.h b/sysdeps/unix/sysv/linux/hppa/pthread.h
index 398d203..65b08f8 100644
--- a/sysdeps/unix/sysv/linux/hppa/pthread.h
+++ b/sysdeps/unix/sysv/linux/hppa/pthread.h
@@ -666,8 +666,8 @@ __pthread_cleanup_routine (struct __pthread_cleanup_frame *__frame)
 # define pthread_cleanup_push(routine, arg) \
   do {									      \
     __pthread_unwind_buf_t __cancel_buf;				      \
-    void (*__cancel_routine) (void *) = (routine);			      \
-    void *__cancel_arg = (arg);						      \
+    void (* volatile __cancel_routine) (void *) = (routine);		      \
+    void * volatile __cancel_arg = (arg);				      \
     int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *)     \
 					__cancel_buf.__cancel_jmp_buf, 0);    \
     if (__glibc_unlikely (__not_first_call))				      \
@@ -701,8 +701,8 @@ extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
 #  define pthread_cleanup_push_defer_np(routine, arg) \
   do {									      \
     __pthread_unwind_buf_t __cancel_buf;				      \
-    void (*__cancel_routine) (void *) = (routine);			      \
-    void *__cancel_arg = (arg);						      \
+    void (* volatile __cancel_routine) (void *) = (routine);		      \
+    void * volatile __cancel_arg = (arg);				      \
     int __not_first_call = __sigsetjmp ((struct __jmp_buf_tag *) (void *)     \
 					__cancel_buf.__cancel_jmp_buf, 0);    \
     if (__glibc_unlikely (__not_first_call))				      \
-- 
2.8.1

